EMILY (4/04/24):
- Have added a skeleton ALU module which will need to be able to add, divide, and compare. Realised probably need to add a subtraction functionality too.
- Running sum of times which then gets divided by the run count to calculate the average. To limit how many runs are included need to subtract oldest run off sum at same time
- Rational for adding times to a global sum as we go is that only one or two arithmetic operation happen at a time rather than possibly heaps to add 10 numbers and then divide
- Currently the inputs and outputs are std logic vecs cause then we can use in built arithmetic but this also means converting into vecs from BCD somewhere
- unsure if that conversion should happen in the FSM or probably preferably in its own block
- the registers are just places values get put
- consider building a FIFO buffer for storing all run times?
- Need to have a think about how we syncronise stuff? thats what the op_en(able) and op_done are for but not sure if they're optimal
- FSM has new states for showing different settings + one for doing calcs. Unsure if comparision should be done internally to FSM or in the ALU
- FSM tb is not currently functional just needs updating the port map tho

MARCUS():


YENI():